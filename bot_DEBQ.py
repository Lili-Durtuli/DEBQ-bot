import json
import os
from typing import Dict, List

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
)

# ====== –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–°–¢–ê (DEBQ) ======
# –®–∫–∞–ª—ã (–∏–Ω–¥–µ–∫—Å—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1)
RESTRAINED_RANGE = range(1, 11)     # 1‚Äì10
EMOTIONAL_RANGE  = range(11, 24)    # 11‚Äì23
EXTERNAL_RANGE   = range(24, 34)    # 24‚Äì33

# –í–æ–ø—Ä–æ—Å—ã —Å –æ–±—Ä–∞—Ç–Ω—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–¥–ª—è DEBQ ‚Äî —Ç–æ–ª—å–∫–æ 31)
REVERSE_SCORED = {31}

# –ù–æ—Ä–º—ã –∏–∑ –º–µ—Ç–æ–¥–∏–∫–∏ (—Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —à–∫–∞–ª)
NORMS = {
    "restrained": 2.4,   # –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω–æ–µ/–¥–∏–µ—Ç–∏—á–µ—Å–∫–æ–µ
    "emotional":  1.8,   # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ
    "external":   2.7,   # –≠–∫—Å—Ç–µ—Ä–Ω–∞–ª—å–Ω–æ–µ
}

# –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è —à–∫–∞–ª
SCALE_LABELS_RU = {
    "restrained": "–û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω–æ–µ (–¥–∏–µ—Ç–∏—á–µ—Å–∫–æ–µ) –ø–∏—â–µ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
    "emotional":  "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—â–µ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
    "external":   "–≠–∫—Å—Ç–µ—Ä–Ω–∞–ª—å–Ω–æ–µ –ø–∏—â–µ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ",
}

# –ü–æ–¥—Å–∫–∞–∑–∫–∏-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ (–∫—Ä–∞—Ç–∫–æ; —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
def interpret(scale_key: str, mean_score: float) -> str:
    norm = NORMS[scale_key]
    # ¬´–í–æ–∫—Ä—É–≥ –Ω–æ—Ä–º—ã¬ª —Å—á–∏—Ç–∞–µ–º ¬±0.2 ‚Äî –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Å—É–∑–∏—Ç—å/—Ä–∞—Å—à–∏—Ä–∏—Ç—å
    if mean_score < norm - 0.2:
        if scale_key == "restrained":
            return "–Ω–∏–∂–µ –Ω–æ—Ä–º—ã ‚Äî —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è –∫ –±–µ—Å–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º—É –ø—Ä–∏—ë–º—É –ø–∏—â–∏"
        if scale_key == "emotional":
            return "–Ω–∏–∂–µ –Ω–æ—Ä–º—ã ‚Äî –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–µ–¥–∞–Ω–∏—è —ç–º–æ—Ü–∏–π –Ω–µ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è"
        if scale_key == "external":
            return "–Ω–∏–∂–µ –Ω–æ—Ä–º—ã ‚Äî –æ–±—ã—á–Ω–æ –Ω–µ –ø–µ—Ä–µ–µ–¥–∞–µ—Ç–µ –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å—Ç–∏–º—É–ª–æ–≤"
    elif mean_score > norm + 0.2:
        if scale_key == "restrained":
            return "–≤—ã—à–µ –Ω–æ—Ä–º—ã ‚Äî ¬´–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π/–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π¬ª –µ–¥–æ–∫, –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –µ–¥–æ–π"
        if scale_key == "emotional":
            return "–≤—ã—à–µ –Ω–æ—Ä–º—ã ‚Äî —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å ¬´–∑–∞–µ–¥–∞—Ç—å¬ª —ç–º–æ—Ü–∏–∏"
        if scale_key == "external":
            return "–≤—ã—à–µ –Ω–æ—Ä–º—ã ‚Äî —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–µ–¥–∞—Ç—å –∏–∑-–∑–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏/–≤–∏–¥–∞ –µ–¥—ã"
    else:
        # –æ–∫–æ–ª–æ –Ω–æ—Ä–º—ã
        if scale_key == "restrained":
            return "–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã ‚Äî –≥–∏–±–∫–∏–µ –∏ —Ä–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
        if scale_key == "emotional":
            return "–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã ‚Äî –Ω–µ —Å–∫–ª–æ–Ω–Ω—ã –∑–∞–µ–¥–∞—Ç—å —ç–º–æ—Ü–∏–∏"
        if scale_key == "external":
            return "–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã ‚Äî –≤–Ω–µ—à–Ω–∏–µ —Å—Ç–∏–º—É–ª—ã –º–∞–ª–æ –≤–ª–∏—è—é—Ç –Ω–∞ –æ–±—ä—ë–º –ø–∏—â–∏"
    return ""


# ====== –ó–ê–ì–†–£–ó–ö–ê –í–û–ü–†–û–°–û–í ======
def load_questions(path: str = "questions.json") -> List[Dict]:
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)
    # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: [{"id": 1, "text": "..."}, ..., {"id": 33, "text": "..."}]
    # –≥–¥–µ id –∏–¥—É—Ç –æ—Ç 1 –¥–æ 33 –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤.
    ids = [q["id"] for q in data]
    if sorted(ids) != list(range(1, 34)):
        raise ValueError("–í —Ñ–∞–π–ª–µ questions.json –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å id 1..33 –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤.")
    return data


QUESTIONS = load_questions()

# ====== –£–¢–ò–õ–ò–¢–´ ======
LIKERT_OPTIONS = [
    ("–ù–∏–∫–æ–≥–¥–∞", 1),
    ("–†–µ–¥–∫–æ", 2),
    ("–ò–Ω–æ–≥–¥–∞", 3),
    ("–ß–∞—Å—Ç–æ", 4),
    ("–û—á–µ–Ω—å —á–∞—Å—Ç–æ", 5),
]

def reverse_score(score: int) -> int:
    # 1<->5, 2<->4, 3->3
    return {1:5, 2:4, 3:3, 4:2, 5:1}[score]

def compute_results(answers: Dict[int, int]) -> Dict[str, float]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ 3 —à–∫–∞–ª–∞–º."""
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω—É–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    scored = {}
    for qid, val in answers.items():
        scored[qid] = reverse_score(val) if qid in REVERSE_SCORED else val

    def mean_for(rng: range) -> float:
        vals = [scored[i] for i in rng]
        return round(sum(vals) / len(vals), 2)

    return {
        "restrained": mean_for(RESTRAINED_RANGE),
        "emotional":  mean_for(EMOTIONAL_RANGE),
        "external":   mean_for(EXTERNAL_RANGE),
    }

def results_text(results: Dict[str, float]) -> str:
    r, e, ex = results["restrained"], results["emotional"], results["external"]
    lines = []
    lines.append("üßÆ *–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Å—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ —à–∫–∞–ª–∞–º)*")
    lines.append(f"‚Ä¢ {SCALE_LABELS_RU['restrained']}: *{r}* (–Ω–æ—Ä–º–∞ {NORMS['restrained']}) ‚Äî {interpret('restrained', r)}")
    lines.append(f"‚Ä¢ {SCALE_LABELS_RU['emotional']}: *{e}* (–Ω–æ—Ä–º–∞ {NORMS['emotional']}) ‚Äî {interpret('emotional', e)}")
    lines.append(f"‚Ä¢ {SCALE_LABELS_RU['external']}: *{ex}* (–Ω–æ—Ä–º–∞ {NORMS['external']}) ‚Äî {interpret('external', ex)}")
    # –†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ –º–µ—Ç–æ–¥–∏—á–∫–∏ (—Å–∂–∞—Ç–æ, –±–µ–∑ –º–µ–¥–∏—Ü–∏–Ω—ã)
    lines.append(
        "\n‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–∏—è:\n"
        "‚Äî –ü–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å–Ω–æ–π —à–∫–∞–ª–µ –æ–∫–æ–ª–æ –Ω–æ—Ä–º—ã ‚Äî –ø—Ä–æ–±–ª–µ–º —Å –≥–∏–±–∫–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –Ω–µ—Ç; –≤—ã—à–µ –Ω–æ—Ä–º—ã ‚Äî –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –µ–¥–æ–π; "
        "–Ω–∏–∂–µ –Ω–æ—Ä–º—ã ‚Äî —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –±–µ—Å–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º—É –ø—Ä–∏—ë–º—É –ø–∏—â–∏. "
        "‚Äî –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞: –≤—ã—à–µ –Ω–æ—Ä–º—ã ‚Äî —Ç—Ä—É–¥–Ω–æ—Å—Ç—å —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —ç–º–æ—Ü–∏—è–º–∏ –±–µ–∑ –µ–¥—ã; –Ω–æ—Ä–º–∞ ‚Äî –æ–±—ã—á–Ω–æ –Ω–µ ¬´–∑–∞–µ–¥–∞–µ—Ç–µ¬ª; "
        "‚Äî –≠–∫—Å—Ç–µ—Ä–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞: –≤—ã—à–µ –Ω–æ—Ä–º—ã ‚Äî –ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ –∏–∑-–∑–∞ –≤–∏–¥–∞/–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –µ–¥—ã; –Ω–∏–∂–µ ‚Äî –≤–Ω–µ—à–Ω–∏–µ —Å—Ç–∏–º—É–ª—ã –º–∞–ª–æ –≤–ª–∏—è—é—Ç."
    )
    lines.append(
        "\n‚ö†Ô∏è –≠—Ç–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥, –∞ –Ω–µ –¥–∏–∞–≥–Ω–æ–∑. –ü—Ä–∏ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞—Ö —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É/–ø—Å–∏—Ö–æ–ª–æ–≥—É, "
        "–æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –Ω–∞ –†–ü–ü."
    )
    return "\n".join(lines)

def make_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=label, callback_data=f"ans:{value}")]
        for (label, value) in LIKERT_OPTIONS
    ]
    return InlineKeyboardMarkup(buttons)

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ DEBQ-—Ç–µ—Å—Ç (33 –≤–æ–ø—Ä–æ—Å–∞) –ø—Ä–æ –ø–∏—â–µ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ. "
        "–û—Ç–≤–µ—Ç—ã: –ù–∏–∫–æ–≥–¥–∞‚Äì–û—á–µ–Ω—å —á–∞—Å—Ç–æ. –ù–∞–∂–º–∏—Ç–µ /test —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n\n"
        "–í–∞–∂–Ω–æ: —ç—Ç–æ –Ω–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–∏–∞–≥–Ω–æ–∑."
    )

async def cmd_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["answers"] = {}
    context.user_data["current_q"] = 1
    await send_question(update, context, 1)

async def send_question(update_or_query, context: ContextTypes.DEFAULT_TYPE, qid: int):
    q = next(q for q in QUESTIONS if q["id"] == qid)
    text = f"–í–æ–ø—Ä–æ—Å {qid}/33\n\n{q['text']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:"
    keyboard = make_keyboard()

    if hasattr(update_or_query, "callback_query") and update_or_query.callback_query:
        await update_or_query.callback_query.edit_message_text(text=text, reply_markup=keyboard)
    else:
        await update_or_query.message.reply_text(text=text, reply_markup=keyboard)

async def on_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if not data.startswith("ans:"):
        return
    score = int(data.split(":")[1])

    qid = context.user_data.get("current_q", 1)
    answers: Dict[int, int] = context.user_data.get("answers", {})
    answers[qid] = score
    context.user_data["answers"] = answers

    next_q = qid + 1
    if next_q <= 33:
        context.user_data["current_q"] = next_q
        await send_question(update, context, next_q)
    else:
        # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã
        res = compute_results(answers)
        text = results_text(res)
        await query.edit_message_text(text=text, parse_mode="Markdown")
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã)
        context.user_data.pop("current_q", None)

def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN —Å —Ç–æ–∫–µ–Ω–æ–º Telegram –±–æ—Ç–∞.")

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("test", cmd_test))
    app.add_handler(CallbackQueryHandler(on_answer))

    app.run_polling()

if __name__ == "__main__":
    main()
